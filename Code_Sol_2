Starting with a 1-indexed array of zeros and a list of operations, for each operation add a value to each the array element between two given indices, inclusive. 
Once all operations have been performed, return the maximum value in the array.

Example
  n = 10
  queries = [[1,5,3],[4,8,7],[6,9,1]]

Queries are interpreted as follows:

    a b k
    1 5 3
    4 8 7
    6 9 1
Add the values of  between the indices  and  inclusive:

index->	 1 2 3  4  5 6 7 8 9 10
	[0,0,0, 0, 0,0,0,0,0, 0]
	[3,3,3, 3, 3,0,0,0,0, 0]
	[3,3,3,10,10,7,7,7,0, 0]
	[3,3,3,10,10,8,8,8,1, 0]
The largest value is 10 after all operations are performed.

Function Description

Complete the function arrayManipulation in the editor below.
  arrayManipulation has the following parameters:
    int n - the number of elements in the array
    int queries[q][3] - a two dimensional array of queries where each queries[i] contains three integers, a, b, and k.
  Returns
    int - the maximum value in the resultant array
  
  
#Code begins here....
#Author: Swaraj Paul

import math
import os
import random
import re
import sys

def arrayManipulation(n, queries):
    arr=[0]*(n+2)              #important to change length to +2
    m1=len(queries)
    for i in range(m1):        
        a,b,k=queries[i][0],queries[i][1],queries[i][2]
        arr[a]+=k              #only changing "a" index
        arr[b+1]-=k            #only changing "b+1" index  as inclusive
    s=0;max=arr[0]    
    for j in range(0,len(arr)):
        s+=arr[j]               # Prefix Sum Algorithm
        if(max<s):
            max=s
    print(arr)   
    return(max)        

if __name__ == '__main__':
    fptr = open(os.environ['OUTPUT_PATH'], 'w')

    nm = input().split()

    n = int(nm[0])

    m = int(nm[1])

    queries = []

    for _ in range(m):
        queries.append(list(map(int, input().rstrip().split())))

    result = arrayManipulation(n, queries)

    fptr.write(str(result) + '\n')

    fptr.close()
 
